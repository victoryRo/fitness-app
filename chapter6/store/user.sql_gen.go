// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: user.sql

package store

import (
	"context"
)

const createUserImage = `-- name: CreateUserImage :one
INSERT INTO app.images (User_ID, Content_Type, Image_Data)
values ($1,
        $2,
        $3) RETURNING image_id, user_id, content_type, image_data
`

type CreateUserImageParams struct {
	UserID      int64  `json:"user_id"`
	ContentType string `json:"content_type"`
	ImageData   []byte `json:"image_data"`
}

func (q *Queries) CreateUserImage(ctx context.Context, arg CreateUserImageParams) (AppImage, error) {
	row := q.db.QueryRowContext(ctx, createUserImage, arg.UserID, arg.ContentType, arg.ImageData)
	var i AppImage
	err := row.Scan(
		&i.ImageID,
		&i.UserID,
		&i.ContentType,
		&i.ImageData,
	)
	return i, err
}

const createUsers = `-- name: CreateUsers :one
INSERT INTO app.users (User_Name, Password_Hash, name)
VALUES ($1,
        $2,
        $3) RETURNING user_id, user_name, password_hash, name, config, created_at, is_enabled
`

type CreateUsersParams struct {
	UserName     string `json:"user_name"`
	PasswordHash string `json:"password_hash"`
	Name         string `json:"name"`
}

func (q *Queries) CreateUsers(ctx context.Context, arg CreateUsersParams) (AppUser, error) {
	row := q.db.QueryRowContext(ctx, createUsers, arg.UserName, arg.PasswordHash, arg.Name)
	var i AppUser
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.PasswordHash,
		&i.Name,
		&i.Config,
		&i.CreatedAt,
		&i.IsEnabled,
	)
	return i, err
}

const deleteUserImage = `-- name: DeleteUserImage :exec
DELETE
FROM app.images i
WHERE i.user_id = $1
`

func (q *Queries) DeleteUserImage(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserImage, userID)
	return err
}

const deleteUserWorkouts = `-- name: DeleteUserWorkouts :exec
DELETE
FROM app.workouts w
WHERE w.user_id = $1
`

func (q *Queries) DeleteUserWorkouts(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserWorkouts, userID)
	return err
}

const deleteUsers = `-- name: DeleteUsers :exec
DELETE
FROM app.users
WHERE user_id = $1
`

func (q *Queries) DeleteUsers(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUsers, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT user_id, user_name, password_hash, name, config, created_at, is_enabled
FROM app.users
WHERE user_id = $1
`

func (q *Queries) GetUser(ctx context.Context, userID int64) (AppUser, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i AppUser
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.PasswordHash,
		&i.Name,
		&i.Config,
		&i.CreatedAt,
		&i.IsEnabled,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT user_id, user_name, password_hash, name, config, created_at, is_enabled
FROM app.users
WHERE user_name = $1
`

func (q *Queries) GetUserByName(ctx context.Context, userName string) (AppUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, userName)
	var i AppUser
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.PasswordHash,
		&i.Name,
		&i.Config,
		&i.CreatedAt,
		&i.IsEnabled,
	)
	return i, err
}

const getUserImage = `-- name: GetUserImage :one
SELECT u.name, u.user_id, i.image_data
FROM app.users u,
     app.images i
WHERE u.user_id = i.user_id
  AND u.user_id = $1
`

type GetUserImageRow struct {
	Name      string `json:"name"`
	UserID    int64  `json:"user_id"`
	ImageData []byte `json:"image_data"`
}

func (q *Queries) GetUserImage(ctx context.Context, userID int64) (GetUserImageRow, error) {
	row := q.db.QueryRowContext(ctx, getUserImage, userID)
	var i GetUserImageRow
	err := row.Scan(&i.Name, &i.UserID, &i.ImageData)
	return i, err
}

const listImages = `-- name: ListImages :many
SELECT image_id, user_id, content_type, image_data
FROM app.images
ORDER BY image_id
`

func (q *Queries) ListImages(ctx context.Context) ([]AppImage, error) {
	rows, err := q.db.QueryContext(ctx, listImages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AppImage{}
	for rows.Next() {
		var i AppImage
		if err := rows.Scan(
			&i.ImageID,
			&i.UserID,
			&i.ContentType,
			&i.ImageData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT user_id, user_name, password_hash, name, config, created_at, is_enabled
FROM app.users
ORDER BY user_name
`

func (q *Queries) ListUsers(ctx context.Context) ([]AppUser, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AppUser{}
	for rows.Next() {
		var i AppUser
		if err := rows.Scan(
			&i.UserID,
			&i.UserName,
			&i.PasswordHash,
			&i.Name,
			&i.Config,
			&i.CreatedAt,
			&i.IsEnabled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertUserImage = `-- name: UpsertUserImage :one
INSERT INTO app.images (Image_Data)
VALUES ($1) ON CONFLICT (Image_ID) DO
UPDATE
    SET Image_Data = EXCLUDED.Image_Data
    RETURNING Image_ID
`

func (q *Queries) UpsertUserImage(ctx context.Context, imageData []byte) (int64, error) {
	row := q.db.QueryRowContext(ctx, upsertUserImage, imageData)
	var image_id int64
	err := row.Scan(&image_id)
	return image_id, err
}
